-- V.2.6.9 Studio (LocalScript)
-- Emerson Hub ‚Äî Versi√≥n de prueba para Roblox Studio
-- Pegar en StarterPlayer -> StarterPlayerScripts

-- Bloque de compatibilidad robusto (Studio)
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui", 12)
if not PlayerGui then
    warn("[Emerson] PlayerGui no encontrado. Ejecuta 'Play' o 'Start Server -> Start Player' en Studio.")
    return
end

-- Notificaci√≥n estilo V2.6.x
local function Notify(msg)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = "Emerson Hub",
            Text = msg,
            Duration = 2
        })
    end)
end

-- Estados persistentes en sesi√≥n
local States = {
    SpeedBoost = false,
    SpeedChoice = 3, -- 1..5
    SpeedMultiplier = 2,
    MultiJump = false,
    Noclip = false
}

local function choiceToMultiplier(c)
    c = tonumber(c) or 1
    if c <= 1 then return 1 end
    if c == 2 then return 1.5 end
    if c == 3 then return 2 end
    if c == 4 then return 2.5 end
    return 3
end
States.SpeedMultiplier = choiceToMultiplier(States.SpeedChoice)

-- variables de personaje
local char, humanoid, rootPart, originalWalkSpeed
local savedTP1 = nil

-- reaplicar estados (Speed/Noclip) tras teleport/respawn
local function applyStates()
    if humanoid then
        originalWalkSpeed = originalWalkSpeed or humanoid.WalkSpeed or 16
        if States.SpeedBoost then
            humanoid.WalkSpeed = math.max(1, (originalWalkSpeed or 16) * (States.SpeedMultiplier or choiceToMultiplier(States.SpeedChoice)))
        else
            humanoid.WalkSpeed = originalWalkSpeed or 16
        end
    end
    if States.Noclip and char then
        for _,p in ipairs(char:GetDescendants()) do
            if p:IsA("BasePart") then
                p.CanCollide = false
            end
        end
    end
end

-- binding personaje
local teleportWatcher = nil
local function bindCharacter(c)
    if not c then return end
    char = c
    humanoid = c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid", 5)
    rootPart = c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart", 5)

    if humanoid then
        originalWalkSpeed = originalWalkSpeed or humanoid.WalkSpeed or 16
    end

    applyStates()

    -- vigilar teleports para reaplicar estados si hay teleporte brusco
    if teleportWatcher and teleportWatcher.Disconnect then
        pcall(function() teleportWatcher:Disconnect() end)
        teleportWatcher = nil
    end
    if rootPart then
        local last = rootPart.CFrame
        teleportWatcher = rootPart:GetPropertyChangedSignal("CFrame"):Connect(function()
            local d = (rootPart.CFrame.p - last.p).magnitude
            last = rootPart.CFrame
            if d > 6 then
                -- teleporte detectado, reaplicar
                task.delay(0.02, applyStates)
                task.delay(0.12, applyStates)
            end
        end)
    end
end

Players.LocalPlayer.CharacterAdded:Connect(bindCharacter)
if Players.LocalPlayer.Character then bindCharacter(Players.LocalPlayer.Character) end

-- ===== UI CREATION =====
local function createUI()
    local gui = Instance.new("ScreenGui")
    gui.Name = "EmersonHub_v2_6_9"
    gui.ResetOnSpawn = false
    gui.Parent = PlayerGui

    -- Main Frame
    local main = Instance.new("Frame", gui)
    main.Name = "MainFrame"
    main.Size = UDim2.new(0,260,0,300)
    main.Position = UDim2.new(0.35, 0, 0.22, 0)
    main.BackgroundColor3 = Color3.fromRGB(255,255,255)
    local mainCorner = Instance.new("UICorner", main); mainCorner.CornerRadius = UDim.new(0,8)

    -- Title bar
    local titleBar = Instance.new("Frame", main)
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1,0,0,36)
    titleBar.BackgroundTransparency = 1

    local titleLabel = Instance.new("TextLabel", titleBar)
    titleLabel.Size = UDim2.new(0.85,0,1,0)
    titleLabel.Position = UDim2.new(0,6,0,0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.Gotham
    titleLabel.TextScaled = true
    titleLabel.Text = "ü¶∑ Emerson Hub ‚Äî v2.6.9"
    titleLabel.TextColor3 = Color3.fromRGB(0,0,0)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local toothBtn = Instance.new("TextButton", titleBar)
    toothBtn.Size = UDim2.new(0.14,-8,0.9,0)
    toothBtn.Position = UDim2.new(0.86,4,0.05,0)
    toothBtn.Text = "ü¶∑"
    toothBtn.Font = Enum.Font.SourceSans
    toothBtn.TextScaled = true
    toothBtn.BackgroundTransparency = 1

    -- mini icon (cuando minimizado)
    local miniBtn = Instance.new("TextButton", gui)
    miniBtn.Name = "MiniBtn"
    miniBtn.Size = UDim2.new(0,44,0,44)
    miniBtn.Position = main.Position
    miniBtn.Text = "ü¶∑"
    miniBtn.Font = Enum.Font.SourceSans
    miniBtn.TextScaled = true
    miniBtn.BackgroundTransparency = 0.2
    miniBtn.Visible = false
    local miniCorner = Instance.new("UICorner", miniBtn); miniCorner.CornerRadius = UDim.new(0,8)

    -- Scroll for options
    local scroll = Instance.new("ScrollingFrame", main)
    scroll.Name = "OptionsScroll"
    scroll.Size = UDim2.new(1,-16,1,-56)
    scroll.Position = UDim2.new(0,8,0,40)
    scroll.BackgroundTransparency = 1
    scroll.ScrollBarThickness = 6
    local listLayout = Instance.new("UIListLayout", scroll); listLayout.Padding = UDim.new(0,8); listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    local pad = Instance.new("UIPadding", scroll); pad.PaddingLeft = UDim.new(0,6); pad.PaddingRight = UDim.new(0,6); pad.PaddingTop = UDim.new(0,6)

    -- rainbow driver (hue rotation)
    local rainbow = {h = 0, col = Color3.fromRGB(255,0,0)}
    task.spawn(function()
        while gui.Parent do
            rainbow.h = (rainbow.h + 3) % 360
            rainbow.col = Color3.fromHSV(rainbow.h/360, 1, 1)
            task.wait(0.04)
        end
    end)

    local function CreateOption(name, order, callback)
        local rect = Instance.new("Frame", scroll)
        rect.Name = "OptRect_"..name:gsub("%s+","")
        rect.Size = UDim2.new(1,0,0,36)
        rect.BackgroundColor3 = Color3.fromRGB(119,136,153)
        local rc = Instance.new("UICorner", rect); rc.CornerRadius = UDim.new(0,6)
        local stroke = Instance.new("UIStroke", rect); stroke.Thickness = 2
        local btn = Instance.new("TextButton", rect)
        btn.Size = UDim2.new(1,-8,1,-8); btn.Position = UDim2.new(0,4,0,4)
        btn.BackgroundTransparency = 1
        btn.Font = Enum.Font.SourceSans
        btn.TextScaled = true
        btn.Text = name
        btn.TextColor3 = rainbow.col
        btn.AutoButtonColor = true
        if callback then btn.MouseButton1Click:Connect(function() pcall(callback) end) end
        -- update rainbow visuals
        task.spawn(function()
            while rect.Parent do
                stroke.Color = rainbow.col
                if btn.Parent then btn.TextColor3 = rainbow.col end
                task.wait(0.04)
            end
        end)
        return rect, btn
    end

    -- draggable main frame (title bar)
    do
        local dragging, dragStart, startPos
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = main.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        UIS.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- minimize / restore behavior
    local minimized = false
    local function minimize()
        minimized = true
        main.Visible = false
        miniBtn.Position = main.Position
        miniBtn.Visible = true
    end
    local function restore()
        minimized = false
        main.Visible = true
        miniBtn.Visible = false
    end
    toothBtn.MouseButton1Click:Connect(function() if minimized then restore() else minimize() end)
    miniBtn.MouseButton1Click:Connect(restore)

    return {
        Gui = gui,
        Main = main,
        Scroll = scroll,
        CreateOption = CreateOption,
        Notify = Notify
    }
end

local UI = createUI()

-- ===== Options functionality (preserve labels & order) =====

-- Guardar TP 1
UI.CreateOption("Guardar TP 1", 0, function()
    if rootPart and rootPart.CFrame then
        savedTP1 = rootPart.CFrame
        UI.Notify("üìç TP 1 guardado")
    else
        UI.Notify("‚ö†Ô∏è No se pudo guardar posici√≥n")
    end
end)

-- Ir a TP 1
UI.CreateOption("Ir a TP 1", 1, function()
    if savedTP1 and rootPart then
        pcall(function() rootPart.CFrame = savedTP1 end)
        -- reaplicar estados tras teleport para evitar que se "resetee" algo
        task.delay(0.02, applyStates)
        task.delay(0.12, applyStates)
        UI.Notify("‚úÖ Teletransportado a TP 1")
    else
        UI.Notify("‚ö†Ô∏è No hay TP guardado")
    end
end)

-- Multi Jump toggle
UI.CreateOption("Multi Jump", 2, function()
    States.MultiJump = not States.MultiJump
    UI.Notify(States.MultiJump and "üü¢ Multi Jump activado" or "üî¥ Multi Jump desactivado")
end)

-- Speed Boost option (abrir√° men√∫)
-- We'll create the SpeedMenu UI separately and make it movable + slide-on-open
local SpeedMenu = Instance.new("Frame")
SpeedMenu.Name = "SpeedMenu"
SpeedMenu.Size = UDim2.new(0,160,0,120)
SpeedMenu.Position = UI.Main.Position + UDim2.new(0, UI.Main.Size.X.Offset + 8, 0, 0)
SpeedMenu.AnchorPoint = Vector2.new(0,0)
SpeedMenu.BackgroundColor3 = Color3.fromRGB(30,30,30)
SpeedMenu.BorderSizePixel = 0
SpeedMenu.Visible = false
SpeedMenu.Parent = UI.Gui
local smCorner = Instance.new("UICorner", SpeedMenu); smCorner.CornerRadius = UDim.new(0,8)

local smTitle = Instance.new("TextLabel", SpeedMenu)
smTitle.Size = UDim2.new(1,-10,0,24)
smTitle.Position = UDim2.new(0,8,0,6)
smTitle.BackgroundTransparency = 1
smTitle.Font = Enum.Font.GothamBold
smTitle.TextScaled = true
smTitle.TextColor3 = Color3.new(1,1,1)
smTitle.Text = "Speed Boost"

local inputLabel = Instance.new("TextLabel", SpeedMenu)
inputLabel.Size = UDim2.new(1,-16,0,22)
inputLabel.Position = UDim2.new(0,8,0,36)
inputLabel.BackgroundTransparency = 1
inputLabel.Font = Enum.Font.Gotham
inputLabel.TextScaled = true
inputLabel.TextColor3 = Color3.new(1,1,1)
inputLabel.Text = "Valor (1-5):"

local inputBox = Instance.new("TextBox", SpeedMenu)
inputBox.Size = UDim2.new(0,60,0,26)
inputBox.Position = UDim2.new(0,8,0,60)
inputBox.BackgroundColor3 = Color3.fromRGB(245,245,245)
inputBox.ClearTextOnFocus = false
inputBox.Text = tostring(States.SpeedChoice)
inputBox.Font = Enum.Font.SourceSans
inputBox.TextScaled = true
inputBox.TextColor3 = Color3.fromRGB(0,0,0)
inputBox.PlaceholderText = "1-5"

local applyBtn = Instance.new("TextButton", SpeedMenu)
applyBtn.Size = UDim2.new(0,72,0,26)
applyBtn.Position = UDim2.new(0,86,0,60)
applyBtn.Text = "Set"
applyBtn.Font = Enum.Font.Gotham
applyBtn.TextScaled = true

local onOffBtn = Instance.new("TextButton", SpeedMenu)
onOffBtn.Size = UDim2.new(0,140,0,30)
onOffBtn.Position = UDim2.new(0,10,0,92)
onOffBtn.Text = (States.SpeedBoost and "ON" or "OFF")
onOffBtn.Font = Enum.Font.GothamBold
onOffBtn.TextScaled = true
onOffBtn.BackgroundColor3 = (States.SpeedBoost and Color3.fromRGB(90,200,90) or Color3.fromRGB(200,90,90))
onOffBtn.TextColor3 = Color3.new(1,1,1)

local function updateSpeedVisuals()
    inputBox.Text = tostring(States.SpeedChoice)
    States.SpeedMultiplier = choiceToMultiplier(States.SpeedChoice)
    onOffBtn.Text = (States.SpeedBoost and "ON" or "OFF")
    onOffBtn.BackgroundColor3 = (States.SpeedBoost and Color3.fromRGB(90,200,90) or Color3.fromRGB(200,90,90))
end
updateSpeedVisuals()

applyBtn.MouseButton1Click:Connect(function()
    local v = tonumber(inputBox.Text)
    if not v then UI.Notify("‚ö†Ô∏è Ingresa n√∫mero 1-5"); return end
    v = math.clamp(math.floor(v), 1, 5)
    States.SpeedChoice = v
    States.SpeedMultiplier = choiceToMultiplier(v)
    UI.Notify("üîß Speed set a "..tostring(v).." (x"..tostring(States.SpeedMultiplier)..")")
    if States.SpeedBoost and humanoid then
        applyStates()
    end
    updateSpeedVisuals()
end)

onOffBtn.MouseButton1Click:Connect(function()
    States.SpeedBoost = not States.SpeedBoost
    States.SpeedMultiplier = States.SpeedMultiplier or choiceToMultiplier(States.SpeedChoice)
    if States.SpeedBoost then
        UI.Notify("üü¢ Speed Boost ON (x"..tostring(States.SpeedMultiplier)..")")
    else
        UI.Notify("üî¥ Speed Boost OFF")
    end
    applyStates()
    updateSpeedVisuals()
end)

-- Speed menu movible + slide-in animation if not moved yet
local speedDragging = false
local speedDragStart = Vector2.new()
local speedStartAbs = Vector2.new()
local speedMoved = false

smTitle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        speedDragging = true
        speedDragStart = input.Position
        -- Guardar absolute start; si 0, se actualizar√°
        speedStartAbs = SpeedMenu.AbsolutePosition
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                speedDragging = false
                speedMoved = true
                -- peque√±o tween para "asentar" la posici√≥n
                local tweenInfo = TweenInfo.new(0.12, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                pcall(function()
                    TweenService:Create(SpeedMenu, tweenInfo, {Position = SpeedMenu.Position}):Play()
                end)
            end
        end)
    end
end)

UIS.InputChanged:Connect(function(input)
    if speedDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - speedDragStart
        local newX = speedStartAbs.X + delta.X
        local newY = speedStartAbs.Y + delta.Y
        SpeedMenu.Position = UDim2.new(0, math.floor(newX), 0, math.floor(newY))
    end
end)

local function positionSpeedIfNeeded()
    if not speedMoved then
        pcall(function()
            local f = UI.Main
            if f then
                local pos = f.AbsolutePosition
                local size = f.AbsoluteSize
                local target = UDim2.new(0, pos.X + size.X + 8, 0, pos.Y)
                local tweenInfo = TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                pcall(function() TweenService:Create(SpeedMenu, tweenInfo, {Position = target}):Play() end)
            end
        end)
    end
end

local speedVisible = false
local function toggleSpeed()
    speedVisible = not speedVisible
    SpeedMenu.Visible = speedVisible
    if speedVisible then positionSpeedIfNeeded() end
end

UI.CreateOption("Speed Boost", 3, function() toggleSpeed() end)

-- Noclip
UI.CreateOption("Noclip", 4, function()
    States.Noclip = not States.Noclip
    if States.Noclip and char then
        for _,p in ipairs(char:GetDescendants()) do
            if p:IsA("BasePart") then p.CanCollide = false end
        end
        UI.Notify("üü¢ Noclip activado")
    else
        UI.Notify("üî¥ Noclip desactivado")
    end
end)

-- ===== Multi Jump improved handling =====
local holdingJump = false
local lastPulse = 0
local holdImpulse = 4.5
local holdInterval = 0.12
local maxHoldY = 55

-- JumpRequest for consistent jumping behavior
UIS.JumpRequest:Connect(function()
    if not States.MultiJump or not humanoid or not rootPart then return end
    pcall(function()
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        humanoid.Jump = true
    end)
    holdingJump = true
    lastPulse = tick()
    task.delay(0.55, function()
        if tick() - lastPulse > 0.52 then holdingJump = false end
    end)
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.Space then
            holdingJump = true
            lastPulse = tick()
        elseif input.KeyCode == Enum.KeyCode.LeftControl then
            UI.Main.Visible = not UI.Main.Visible
            UI.Notify(UI.Main.Visible and "üîì Panel mostrado" or "üîí Panel minimizado")
        end
    end
end)
UIS.InputEnded:Connect(function(input, gpe)
    if gpe then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        holdingJump = false
    end
end)

RunService.Heartbeat:Connect(function(dt)
    if States.MultiJump and holdingJump and humanoid and rootPart then
        local now = tick()
        if now - lastPulse >= holdInterval then
            lastPulse = now
            pcall(function()
                local v = rootPart.Velocity
                local newY = math.min(v.Y + holdImpulse, maxHoldY)
                rootPart.Velocity = Vector3.new(v.X, newY, v.Z)
            end)
        end
    end

    if States.Noclip and char then
        for _,pn in pairs({"HumanoidRootPart","Torso","UpperTorso","LowerTorso","Head"}) do
            local p = char:FindFirstChild(pn)
            if p and p:IsA("BasePart") then p.CanCollide = false end
        end
    end
end)

-- Reapply states on respawn
Players.LocalPlayer.CharacterAdded:Connect(function(c)
    bindCharacterEnhanced(c)
    task.delay(0.05, applyStates)
    task.delay(0.15, applyStates)
end)

-- ensure helper functions exist in scope (no changes to logic)
function bindCharacterEnhanced(c)
    bindCharacter(c)
end

-- Inicial
States.SpeedMultiplier = choiceToMultiplier(States.SpeedChoice)
UI.Notify("‚úÖ Emerson Hub v2.6.9 cargado (Studio).")
